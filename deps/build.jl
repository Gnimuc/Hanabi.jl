using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpyhanabi"], :libpyhanabi),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/findmyway/HanabiBuilder/releases/download/v0.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Hanabi.v0.1.0.aarch64-linux-gnu.tar.gz", "5d9c37f1cb1dde82990fafe5d8a5e1d52345bb36cbd391ca0d1cf24384121922"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Hanabi.v0.1.0.aarch64-linux-musl.tar.gz", "695710f981b91f88d2485224de987d124c698581856464ee39cfb955eecb7e18"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Hanabi.v0.1.0.arm-linux-gnueabihf.tar.gz", "0c54002537a8d89d9520f620d7f456fed7bbf89c53664f141473e9025ee0492a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Hanabi.v0.1.0.arm-linux-musleabihf.tar.gz", "bbd963832fcac52c00d1afc8d4be5c735b3ee33be5de88563ad881b02f0d74ec"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Hanabi.v0.1.0.i686-linux-gnu.tar.gz", "c0f7fddb4b57e5ad55644c99846cf7713d0348c34305151bebaeb5d3dc16f1ce"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Hanabi.v0.1.0.i686-linux-musl.tar.gz", "d115cf427fb49a97e0c652b2685a60f511d02633213b8a3164a14b6b9ae37312"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Hanabi.v0.1.0.powerpc64le-linux-gnu.tar.gz", "9beead5ab1d114ff6aded9a877ab7c4560060b6b71808c3a64f38ef0850130ad"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Hanabi.v0.1.0.x86_64-linux-gnu.tar.gz", "ad8c0c19105045037d00497058a7ccdc1de676fdbee25d6ac77a376cd3022cf9"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Hanabi.v0.1.0.x86_64-linux-musl.tar.gz", "618098251c6ebb88074f3cffd7f34fb0d2ddbcbade58f71224616031ab547190"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
